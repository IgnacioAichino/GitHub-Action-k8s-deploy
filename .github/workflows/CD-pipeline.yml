# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy to AKS

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "apprepositoryimages.azurecr.io"
  CONTAINER_NAME_API: "myapi"
  CONTAINER_NAME_CLIENT: "myclient"
  CONTAINER_NAME_MONGO: "mongo"
  RESOURCE_GROUP: "appGroup"
  CLUSTER_NAME: "myAKSCluster"

jobs:
  buildPROD:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3        
    - name: Build and Push API
      working-directory: ./src
      env:
        REGISTRY: apprepositoryimages.azurecr.io
        IMAGE_NAME: myapi
        TAG: latest
      run: |
        pwd ls -la
        ls -l
        docker build -f ./API/Dockerfile --tag $REGISTRY/$IMAGE_NAME:$TAG . 
        docker image ls
        echo ${{ secrets.ACR_PASSWORD }} | docker login $REGISTRY --username ${{ secrets.ACR_USERNAME }} --password-stdin
        docker push $REGISTRY/$IMAGE_NAME:$TAG
        
    - name: Build and Push Client
      working-directory: ./src
      env:
        REGISTRY: apprepositoryimages.azurecr.io
        IMAGE_NAME: myclient
        TAG: latest
      run: |
        pwd ls -la
        ls -l
        docker build -f ./Client/Dockerfile --tag $REGISTRY/$IMAGE_NAME:$TAG  . 
        docker image ls
        echo ${{ secrets.ACR_PASSWORD }} | docker login $REGISTRY --username ${{ secrets.ACR_USERNAME }} --password-stdin
        docker push $REGISTRY/$IMAGE_NAME:$TAG

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildPROD]
    steps:
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
          
      - name: Deployment job
        working-directory: .
        run: |
          pwd ls -la
          ls -l
          kubectl create secret docker-registry acr-secret --docker-server=$AZURE_CONTAINER_REGISTRY --docker-username=${{ secrets.ACR_USERNAME }} --docker-password=${{ secrets.ACR_PASSWORD }}
          kubectl get pod
          kubectl get secret
          kubectl apply -f ./k8s/
          kubectl get pod
          kubectl get service